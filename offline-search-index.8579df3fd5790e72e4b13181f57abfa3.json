[{"body":"Not yet documented.\n","categories":"","description":"Commands and helpers for editing and maintaining Markdown documents.","excerpt":"Commands and helpers for editing and maintaining Markdown documents.","ref":"/Documentarian/modules/documentarian/","tags":"","title":"Documentarian"},{"body":"Not yet written.\n","categories":"","description":"Conceptual documentation for the module.","excerpt":"Conceptual documentation for the module.","ref":"/Documentarian/modules/devx/concepts/","tags":"","title":"Concepts"},{"body":"Not yet written.\n","categories":"","description":"Conceptual documentation for the PowerShell code in the **Documentarian** module.","excerpt":"Conceptual documentation for the PowerShell code in the …","ref":"/Documentarian/modules/documentarian/concepts/","tags":"","title":"Concepts"},{"body":"This guide…\n","categories":"","description":"Guidance and information on writing and maintaining documentation.","excerpt":"Guidance and information on writing and maintaining documentation.","ref":"/Documentarian/docs/authoring/","tags":"","title":"Authoring Guide"},{"body":"The Documentarian PowerShell modules provide a powerful toolkit for writing and maintaining Markdown documentation.\n","categories":"","description":"","excerpt":"The Documentarian PowerShell modules provide a powerful toolkit for …","ref":"/Documentarian/modules/","tags":"","title":"Documentarian Modules"},{"body":"Not yet written.\n","categories":"","description":"Narrative documentation for the module.","excerpt":"Narrative documentation for the module.","ref":"/Documentarian/modules/devx/tutorials/","tags":"","title":"Tutorials"},{"body":"Not yet written.\n","categories":"","description":"Narrative documentation for the PowerShell code in the **Documentarian** module.","excerpt":"Narrative documentation for the PowerShell code in the …","ref":"/Documentarian/modules/documentarian/tutorials/","tags":"","title":"Tutorials"},{"body":"Not yet documented.\n","categories":"","description":"Guidance and information on contributing to the Documentarian projects.","excerpt":"Guidance and information on contributing to the Documentarian …","ref":"/Documentarian/docs/contributing/","tags":"","title":"Contributing Guide"},{"body":"Not yet documented.\n","categories":"","description":"The development experience toolkit for modern PowerShell modules.","excerpt":"The development experience toolkit for modern PowerShell modules.","ref":"/Documentarian/modules/devx/","tags":"","title":"Documentarian.DevX"},{"body":"","categories":"","description":"Reference documentation for the module's code.","excerpt":"Reference documentation for the module's code.","ref":"/Documentarian/modules/devx/reference/","tags":"","title":"Reference"},{"body":"","categories":"","description":"Reference documentation for the PowerShell code in the **Documentarian** module.","excerpt":"Reference documentation for the PowerShell code in the …","ref":"/Documentarian/modules/documentarian/reference/","tags":"","title":"Reference"},{"body":"Private Source This folder contains the private classes, enums, and functions used by this module as well as their unit tests.\nDuring module composition, the code in this folder (except for the tests) is placed into the generated Documentarian.DevX.Private.psm1 file.\n[Classes] [Enums] [Functions] Classes This folder contains the private classes used by this module and their unit tests.\nThe .LoadOrder.jsonc file determines the order the classes should be loaded during composition; this is critical to ensure nothing breaks.\nEnums This folder contains the private enums used by this module and their unit tests.\nThe .LoadOrder.jsonc file determines the order the enums should be loaded during composition; this is critical to ensure nothing breaks.\nFunctions This folder contains the private functions used by this module and their unit tests.\n","categories":"","description":"","excerpt":"Private Source This folder contains the private classes, enums, and …","ref":"/Documentarian/includes/source/devx/private/readme/","tags":"","title":""},{"body":"Public Source This folder contains the public classes, enums, and functions used by this module as well as their unit tests.\nDuring module composition, the code in this folder (except for the tests) is placed into the generated Documentarian.DevX.psm1 file.\n[Classes] [Enums] [Functions] [Completion] [Configuration] [General] Classes This folder contains the public classes used by this module and their unit tests. During composition, these classes are also included in the generated Init.ps1 file, which enables automatic import of the public classes into the caller’s session for direct use.\nThe .LoadOrder.jsonc file determines the order the classes should be loaded during composition; this is critical to ensure nothing breaks.\nEnums This folder contains the public enums used by this module and their unit tests. During composition, these enums are also included in the generated Init.ps1 file, which enables automatic import of the public enums into the caller’s session for direct use.\nThe .LoadOrder.jsonc file determines the order the classes should be loaded during composition; this is critical to ensure nothing breaks.\nFunctions This folder contains the public functions used by this module and their unit tests. The public functions are broken down into a few groups: Completion, Configuration, and General.\nCompletion This folder contains functions for registering argument completers so users do not need to assemble their own scriptblocks and call Register-ArgumentCompleter.\nConfiguration This folder contains functions for interacting with this module’s configuration state. Unless there is a good reason, they should always come in a trio: Get, Set, and Remove.\nGeneral This folder contains functions which do not fit into another category. These functions are “normal” PowerShell functions you might find in any other module.\n","categories":"","description":"","excerpt":"Public Source This folder contains the public classes, enums, and …","ref":"/Documentarian/includes/source/devx/public/readme/","tags":"","title":""},{"body":"Source The files and folders here contain the content that is pulled together for publishing to the PowerShell Gallery. Information on the files and folders are included below.\nPrivate Public Templates Private This folder contains the private classes, enums, and functions used by this module as well as their unit tests.\nDuring module composition, the code in this folder (except for the tests) is placed into the generated Documentarian.DevX.Private.psm1 file.\nFor more information, see the folder’s readme.\nPublic This folder contains the public classes, enums, and functions used by this module as well as their unit tests.\nDuring module composition, the code in this folder (except for the tests) is placed into the generated Documentarian.DevX.psm1 file.\nFor more information, see the folder’s readme.\nTemplates This folder contains the templated files and folders this module provides for users. It is copied alongside the generated module manifest, root module, private module, and init script during composition.\nFor more information, see the folder’s readme.\n","categories":"","description":"","excerpt":"Source The files and folders here contain the content that is pulled …","ref":"/Documentarian/includes/source/devx/readme/","tags":"","title":""},{"body":"Documentarian A PowerShell module for maintaining documentation in a repository.\nRequirements PowerShell 7.2+ ","categories":"","description":"","excerpt":"Documentarian A PowerShell module for maintaining documentation in a …","ref":"/Documentarian/includes/source/devx/templates/module/readme/","tags":"","title":""},{"body":"Private Source This folder contains the private classes, enums, and functions used by this module as well as their unit tests.\nDuring module composition, the code in this folder (except for the tests) is placed into the generated {{TEMPLATE__MODULE__NAME}}.Private.psm1 file.\n[Classes] [Enums] [Functions] Classes This folder contains the private classes used by this module and their unit tests.\nThe .LoadOrder.jsonc file determines the order the classes should be loaded during composition; this is critical to ensure nothing breaks.\nEnums This folder contains the private enums used by this module and their unit tests.\nThe .LoadOrder.jsonc file determines the order the enums should be loaded during composition; this is critical to ensure nothing breaks.\nFunctions This folder contains the private functions used by this module and their unit tests.\n","categories":"","description":"","excerpt":"Private Source This folder contains the private classes, enums, and …","ref":"/Documentarian/includes/source/devx/templates/module/source/private/readme/","tags":"","title":""},{"body":"Public Source This folder contains the public classes, enums, and functions used by this module as well as their unit tests.\nDuring module composition, the code in this folder (except for the tests) is placed into the generated {{TEMPLATE__MODULE__NAME}}.psm1 file.\n[Classes] [Enums] [Functions] [Completion] [Configuration] [General] Classes This folder contains the public classes used by this module and their unit tests. During composition, these classes are also included in the generated Init.ps1 file, which enables automatic import of the public classes into the caller’s session for direct use.\nThe .LoadOrder.jsonc file determines the order the classes should be loaded during composition; this is critical to ensure nothing breaks.\nEnums This folder contains the public enums used by this module and their unit tests. During composition, these enums are also included in the generated Init.ps1 file, which enables automatic import of the public enums into the caller’s session for direct use.\nThe .LoadOrder.jsonc file determines the order the classes should be loaded during composition; this is critical to ensure nothing breaks.\nFunctions This folder contains the public functions used by this module and their unit tests. The public functions are broken down into a few groups: Completion, Configuration, and General.\nCompletion This folder contains functions for registering argument completers so users do not need to assemble their own scriptblocks and call Register-ArgumentCompleter.\nConfiguration This folder contains functions for interacting with this module’s configuration state. Unless there is a good reason, they should always come in a trio: Get, Set, and Remove.\nGeneral This folder contains functions which do not fit into another category. These functions are “normal” PowerShell functions you might find in any other module.\n","categories":"","description":"","excerpt":"Public Source This folder contains the public classes, enums, and …","ref":"/Documentarian/includes/source/devx/templates/module/source/public/readme/","tags":"","title":""},{"body":"Source The files and folders here contain the content that is pulled together for publishing to the PowerShell Gallery. Information on the files and folders are included below.\nPrivate Public Templates Private This folder contains the private classes, enums, and functions used by this module as well as their unit tests.\nDuring module composition, the code in this folder (except for the tests) is placed into the generated {{TEMPLATE__MODULE__NAME}}.Private.psm1 file.\nFor more information, see the folder’s readme.\nPublic This folder contains the public classes, enums, and functions used by this module as well as their unit tests.\nDuring module composition, the code in this folder (except for the tests) is placed into the generated {{TEMPLATE__MODULE__NAME}}.psm1 file.\nFor more information, see the folder’s readme.\nTemplates This folder contains the templated files and folders this module provides for users. It is copied alongside the generated module manifest, root module, private module, and init script during composition.\nFor more information, see the folder’s readme.\n","categories":"","description":"","excerpt":"Source The files and folders here contain the content that is pulled …","ref":"/Documentarian/includes/source/devx/templates/module/source/readme/","tags":"","title":""},{"body":"Templates This folder contains the templated files and folders this module provides for users. It is copied alongside the generated module manifest, root module, private module, and init script during composition.\n","categories":"","description":"","excerpt":"Templates This folder contains the templated files and folders this …","ref":"/Documentarian/includes/source/devx/templates/readme/","tags":"","title":""},{"body":"Private Source This folder contains the private classes, enums, and functions used by this module as well as their unit tests.\nDuring module composition, the code in this folder (except for the tests) is placed into the generated Documentarian.Private.psm1 file.\n[Classes] [Enums] [Functions] Classes This folder contains the private classes used by this module and their unit tests.\nThe .LoadOrder.jsonc file determines the order the classes should be loaded during composition; this is critical to ensure nothing breaks.\nEnums This folder contains the private enums used by this module and their unit tests.\nThe .LoadOrder.jsonc file determines the order the enums should be loaded during composition; this is critical to ensure nothing breaks.\nFunctions This folder contains the private functions used by this module and their unit tests.\n","categories":"","description":"","excerpt":"Private Source This folder contains the private classes, enums, and …","ref":"/Documentarian/includes/source/documentarian/private/readme/","tags":"","title":""},{"body":"Public Source This folder contains the public classes, enums, and functions used by this module as well as their unit tests.\nDuring module composition, the code in this folder (except for the tests) is placed into the generated Documentarian.psm1 file.\n[Classes] [Enums] [Functions] [Completion] [Configuration] [General] Classes This folder contains the public classes used by this module and their unit tests. During composition, these classes are also included in the generated Init.ps1 file, which enables automatic import of the public classes into the caller’s session for direct use.\nThe .LoadOrder.jsonc file determines the order the classes should be loaded during composition; this is critical to ensure nothing breaks.\nEnums This folder contains the public enums used by this module and their unit tests. During composition, these enums are also included in the generated Init.ps1 file, which enables automatic import of the public enums into the caller’s session for direct use.\nThe .LoadOrder.jsonc file determines the order the classes should be loaded during composition; this is critical to ensure nothing breaks.\nFunctions This folder contains the public functions used by this module and their unit tests. The public functions are broken down into a few groups: Completion, Configuration, and General.\nCompletion This folder contains functions for registering argument completers so users do not need to assemble their own scriptblocks and call Register-ArgumentCompleter.\nConfiguration This folder contains functions for interacting with this module’s configuration state. Unless there is a good reason, they should always come in a trio: Get, Set, and Remove.\nGeneral This folder contains functions which do not fit into another category. These functions are “normal” PowerShell functions you might find in any other module.\n","categories":"","description":"","excerpt":"Public Source This folder contains the public classes, enums, and …","ref":"/Documentarian/includes/source/documentarian/public/readme/","tags":"","title":""},{"body":"Source The files and folders here contain the content that is pulled together for publishing to the PowerShell Gallery. Information on the files and folders are included below.\nDocumentarian.psd1 Documentarian.psm1 Private Public Private This folder contains the private classes, enums, and functions used by this module as well as their unit tests.\nDuring module composition, the code in this folder (except for the tests) is placed into the generated Documentarian.Private.psm1 file.\nFor more information, see the folder’s readme.\nPublic This folder contains the public classes, enums, and functions used by this module as well as their unit tests.\nDuring module composition, the code in this folder (except for the tests) is placed into the generated Documentarian.psm1 file.\nFor more information, see the folder’s readme.\n","categories":"","description":"","excerpt":"Source The files and folders here contain the content that is pulled …","ref":"/Documentarian/includes/source/documentarian/readme/","tags":"","title":""},{"body":"Not yet written.\n","categories":"","description":"PowerShell `about_*` topics for the Documentarian.DevX module.","excerpt":"PowerShell `about_*` topics for the Documentarian.DevX module.","ref":"/Documentarian/modules/devx/reference/about/","tags":"","title":"About Topics"},{"body":"Not yet written.\n","categories":"","description":"PowerShell `about_*` topics for the **Documentarian** module.","excerpt":"PowerShell `about_*` topics for the **Documentarian** module.","ref":"/Documentarian/modules/documentarian/reference/about/","tags":"","title":"About Topics"},{"body":"Not yet written.\n","categories":"","description":"Reference documentation for the module's attribute classes.","excerpt":"Reference documentation for the module's attribute classes.","ref":"/Documentarian/modules/devx/reference/attributes/","tags":"","title":"Attributes"},{"body":"Not yet written.\n","categories":"","description":"Reference documentation for the PowerShell attributes in the **Documentarian** module.","excerpt":"Reference documentation for the PowerShell attributes in the …","ref":"/Documentarian/modules/documentarian/reference/attributes/","tags":"","title":"Attributes"},{"body":"","categories":"","description":"","excerpt":"","ref":"/Documentarian/blog/","tags":"","title":"Blog"},{"body":"","categories":"","description":"","excerpt":"","ref":"/Documentarian/categories/","tags":"","title":"Categories"},{"body":"Unreleased Scaffolded initial project. ","categories":"","description":"All notable changes to the **Documentarian.DevX** module are documented in this file.\n\nThis changelog's format is based on [Keep a Changelog][01] and this project adheres to\n[Semantic Versioning][02].\n\nFor releases before `1.0.0`, this project uses the following convention:\n\n- While the major version is `0`, the code is considered unstable.\n- The minor version is incremented when a backwards-incompatible change is introduced.\n- The patch version is incremented when a backwards-compatible change or bug fix is introduced.\n\n[01]: https://keepachangelog.com/en/1.0.0/\n[02]: https://semver.org/spec/v2.0.0.html\n","excerpt":"All notable changes to the **Documentarian.DevX** module are …","ref":"/Documentarian/modules/devx/changelog/","tags":"","title":"Changelog"},{"body":"Unreleased Scaffolded initial project. ","categories":"","description":"All notable changes to the **Documentarian** module are documented in this file.\n\nThis changelog's format is based on [Keep a Changelog][01] and this project adheres to\n[Semantic Versioning][02].\n\nFor releases before `1.0.0`, this project uses the following convention:\n\n- While the major version is `0`, the code is considered unstable.\n- The minor version is incremented when a backwards-incompatible change is introduced.\n- The patch version is incremented when a backwards-compatible change or bug fix is introduced.\n\n[01]: https://keepachangelog.com/en/1.0.0/\n[02]: https://semver.org/spec/v2.0.0.html\n","excerpt":"All notable changes to the **Documentarian** module are documented in …","ref":"/Documentarian/modules/documentarian/changelog/","tags":"","title":"Changelog"},{"body":"Not yet written.\n","categories":"","description":"Reference documentation for the module's classes.","excerpt":"Reference documentation for the module's classes.","ref":"/Documentarian/modules/devx/reference/classes/","tags":"","title":"Classes"},{"body":"Not yet written.\n","categories":"","description":"Reference documentation for the PowerShell classes in the **Documentarian** module.","excerpt":"Reference documentation for the PowerShell classes in the …","ref":"/Documentarian/modules/documentarian/reference/classes/","tags":"","title":"Classes"},{"body":"Not yet written.\n","categories":"","description":"Reference documentation for the module's cmdlets.","excerpt":"Reference documentation for the module's cmdlets.","ref":"/Documentarian/modules/devx/reference/cmdlets/","tags":"","title":"Cmdlet Reference"},{"body":"Not yet written.\n","categories":"","description":"Reference documentation for the PowerShell cmdlets in the **Documentarian** module.","excerpt":"Reference documentation for the PowerShell cmdlets in the …","ref":"/Documentarian/modules/documentarian/reference/cmdlets/","tags":"","title":"Cmdlet Reference"},{"body":"","categories":"","description":"","excerpt":"","ref":"/Documentarian/community/","tags":"","title":"Community"},{"body":" Documentarian: A delightful docs toolkit This is the landing page for Documentarian, an open source toolkit for documentarians and community contributors to reduce friction and provide a delightful experience for contributing to and maintaining documentation. Learn More Start a Discussion PowerShell Modules The Documentarian modules provide a collection of command-line tools for writing and maintaining Markdown files.\nHugo Theme The docsy-pwsh theme for Hugo doesn’t just power this site, it’s available for you to use when documenting your own PowerShell modules.\nLinting Packages The PowerShell-Docs dictionary for cSpell and package for Vale provides helpful defaults for linting the prose of your PowerShell documentation.\n","categories":"","description":"","excerpt":" Documentarian: A delightful docs toolkit This is the landing page for …","ref":"/Documentarian/","tags":"","title":"Documentarian"},{"body":"Not yet written.\n","categories":"","description":"Reference documentation for the module's enums.","excerpt":"Reference documentation for the module's enums.","ref":"/Documentarian/modules/devx/reference/enums/","tags":"","title":"Enums"},{"body":"Not yet written.\n","categories":"","description":"Reference documentation for the PowerShell enums in the **Documentarian** module.","excerpt":"Reference documentation for the PowerShell enums in the …","ref":"/Documentarian/modules/documentarian/reference/enums/","tags":"","title":"Enums"},{"body":"Find-Ast Synopsis {{ Fill in the Synopsis }}\nSyntax FromAstInfo (Default) Find-Ast [-Recurse] [\u003cCommonParameters\u003e] FromAstInfoWithType Find-Ast -AstInfo \u003cAstInfo\u003e -Type \u003cType[]\u003e [-Recurse] [\u003cCommonParameters\u003e] FromAstInfoWithPredicate Find-Ast -AstInfo \u003cAstInfo\u003e -Predicate \u003cScriptBlock[]\u003e [-Recurse] [\u003cCommonParameters\u003e] FromPathWithType Find-Ast -Path \u003cString\u003e -Type \u003cType[]\u003e [-Recurse] [\u003cCommonParameters\u003e] FromPathWithPredicate Find-Ast -Path \u003cString\u003e -Predicate \u003cScriptBlock[]\u003e [-Recurse] [\u003cCommonParameters\u003e] FromScriptBlockWithType Find-Ast -ScriptBlock \u003cScriptBlock\u003e -Type \u003cType[]\u003e [-Recurse] [\u003cCommonParameters\u003e] FromScriptBlockWithPredicate Find-Ast -ScriptBlock \u003cScriptBlock\u003e -Predicate \u003cScriptBlock[]\u003e [-Recurse] [\u003cCommonParameters\u003e] Description {{ Fill in the Description }}\nExamples Example 1 {{ Add example code here }} {{ Add example description here }}\nParameters -AstInfo {{ Fill AstInfo Description }}\nType: AstInfo Parameter Sets: FromAstInfoWithType, FromAstInfoWithPredicate Aliases: Required: True Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -Path {{ Fill Path Description }}\nType: String Parameter Sets: FromPathWithType, FromPathWithPredicate Aliases: Required: True Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -Predicate {{ Fill Predicate Description }}\nType: ScriptBlock[] Parameter Sets: FromAstInfoWithPredicate, FromPathWithPredicate, FromScriptBlockWithPredicate Aliases: Required: True Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -Recurse {{ Fill Recurse Description }}\nType: SwitchParameter Parameter Sets: (All) Aliases: Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -ScriptBlock {{ Fill ScriptBlock Description }}\nType: ScriptBlock Parameter Sets: FromScriptBlockWithType, FromScriptBlockWithPredicate Aliases: Required: True Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -Type {{ Fill Type Description }}\nType: Type[] Parameter Sets: FromAstInfoWithType, FromPathWithType, FromScriptBlockWithType Aliases: Required: True Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.\nInputs None Outputs System.Management.Automation.Language.Ast Notes Related Links ","categories":"","description":"","excerpt":"Find-Ast Synopsis {{ Fill in the Synopsis }}\nSyntax FromAstInfo …","ref":"/Documentarian/modules/devx/reference/cmdlets/find-ast/","tags":"","title":"Find-Ast"},{"body":"Get-Ast Synopsis {{ Fill in the Synopsis }}\nSYNTAX ByPath Get-Ast -Path \u003cString\u003e [\u003cCommonParameters\u003e] ByScriptBlock Get-Ast -ScriptBlock \u003cScriptBlock\u003e [\u003cCommonParameters\u003e] ByInputText Get-Ast -Text \u003cString\u003e [\u003cCommonParameters\u003e] Description {{ Fill in the Description }}\nExamples Example 1 PS C:\\\u003e {{ Add example code here }} {{ Add example description here }}\nPARAMETERS -Path {{ Fill Path Description }}\nType: String Parameter Sets: ByPath Aliases: Required: True Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -ScriptBlock {{ Fill ScriptBlock Description }}\nType: ScriptBlock Parameter Sets: ByScriptBlock Aliases: Required: True Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -Text {{ Fill Text Description }}\nType: String Parameter Sets: ByInputText Aliases: Required: True Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.\nInputs None Outputs AstInfo Notes Related Links ","categories":"","description":"","excerpt":"Get-Ast Synopsis {{ Fill in the Synopsis }}\nSYNTAX ByPath Get-Ast …","ref":"/Documentarian/modules/devx/reference/cmdlets/get-ast/","tags":"","title":"Get-Ast"},{"body":"Get-AstType Synopsis {{ Fill in the Synopsis }}\nSYNTAX ByPattern (Default) Get-AstType -Pattern \u003cString\u003e [\u003cCommonParameters\u003e] ByName Get-AstType -Name \u003cString[]\u003e [\u003cCommonParameters\u003e] Description {{ Fill in the Description }}\nExamples Example 1 PS C:\\\u003e {{ Add example code here }} {{ Add example description here }}\nParameters -Name Specify a name to look for in the list of AST types; the “Ast” suffix is optional\nType: String[] Parameter Sets: ByName Aliases: Required: True Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -Pattern Specify a valid regex pattern to match in the list of AST types\nType: String Parameter Sets: ByPattern Aliases: Required: True Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.\nInputs None Outputs System.Type Notes Related Links ","categories":"","description":"","excerpt":"Get-AstType Synopsis {{ Fill in the Synopsis }}\nSYNTAX ByPattern …","ref":"/Documentarian/modules/devx/reference/cmdlets/get-asttype/","tags":"","title":"Get-AstType"},{"body":"Get-Document Synopsis {{ Fill in the Synopsis }}\nSyntax Get-Document [-Path [string[]]] Description {{ Fill in the Description }}\nExamples Example 1 {{ Add example code here }} {{ Add example description here }}\nParameters -Path {{ Fill Path Description }}\nType: String Parameter Sets: (All) Aliases: Required: True Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.\nInputs None Outputs ParsedDocument Notes Related Links ","categories":"","description":"","excerpt":"Get-Document Synopsis {{ Fill in the Synopsis }}\nSyntax Get-Document …","ref":"/Documentarian/modules/documentarian/reference/cmdlets/get-document/","tags":"","title":"Get-Document"},{"body":"Get-SourceFolder Synopsis {{ Fill in the Synopsis }}\nSYNTAX ByPreset (Default) Get-SourceFolder [-Preset \u003cString\u003e] [-PublicFolder \u003cString\u003e] [-PrivateFolder \u003cString\u003e] [-SourceFolder \u003cString\u003e] [\u003cCommonParameters\u003e] WithSpecificFolders Get-SourceFolder [-Category \u003cString[]\u003e] [-Scope \u003cString[]\u003e] [-Preset \u003cString\u003e] [-PublicFolder \u003cString\u003e] [-PrivateFolder \u003cString\u003e] [\u003cCommonParameters\u003e] ByOption Get-SourceFolder -Category \u003cString[]\u003e -Scope \u003cString[]\u003e -PublicFolder \u003cString\u003e -PrivateFolder \u003cString\u003e -SourceFolder \u003cString\u003e [\u003cCommonParameters\u003e] WithSourceFolder Get-SourceFolder [-SourceFolder \u003cString\u003e] [\u003cCommonParameters\u003e] Description {{ Fill in the Description }}\nExamples Example 1 PS C:\\\u003e {{ Add example code here }} {{ Add example description here }}\nParameters -Category {{ Fill Category Description }}\nType: String[] Parameter Sets: WithSpecificFolders Aliases: Accepted values: Classes, Enums, Functions Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False Type: String[] Parameter Sets: ByOption Aliases: Accepted values: Classes, Enums, Functions Required: True Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -Preset {{ Fill Preset Description }}\nType: String Parameter Sets: ByPreset, WithSpecificFolders Aliases: Accepted values: Ordered, Functions, All Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -PrivateFolder {{ Fill PrivateFolder Description }}\nType: String Parameter Sets: ByPreset, WithSpecificFolders Aliases: Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False Type: String Parameter Sets: ByOption Aliases: Required: True Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -PublicFolder {{ Fill PublicFolder Description }}\nType: String Parameter Sets: ByPreset, WithSpecificFolders Aliases: Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False Type: String Parameter Sets: ByOption Aliases: Required: True Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -Scope {{ Fill Scope Description }}\nType: String[] Parameter Sets: WithSpecificFolders Aliases: Accepted values: Public, Private Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False Type: String[] Parameter Sets: ByOption Aliases: Accepted values: Public, Private Required: True Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -SourceFolder {{ Fill SourceFolder Description }}\nType: String Parameter Sets: ByPreset, WithSourceFolder Aliases: Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False Type: String Parameter Sets: ByOption Aliases: Required: True Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.\nInputs None Outputs SourceFolder Notes Related Links ","categories":"","description":"","excerpt":"Get-SourceFolder Synopsis {{ Fill in the Synopsis }}\nSYNTAX ByPreset …","ref":"/Documentarian/modules/devx/reference/cmdlets/get-sourcefolder/","tags":"","title":"Get-SourceFolder"},{"body":"","categories":"","description":"","excerpt":"","ref":"/Documentarian/docs/","tags":"","title":"Guides"},{"body":"","categories":"","description":"","excerpt":"","ref":"/Documentarian/includes/","tags":"","title":"Includes"},{"body":"Definition Source Code # Copyright (c) Microsoft Corporation. # Licensed under the MIT License. enum MarkdownExtension { Advanced PipeTables GfmPipeTables EmphasisExtras ListExtras HardLineBreak Footnotes Footers Citations Attributes GridTables Abbreviations Emojis DefinitionLists CustomContainers Figures Mathematics Bootstrap MediaLinks SmartyPants AutoIdentifiers TaskLists Diagrams NoFollowLinks NoOpenerLinks NoReferrerLinks NoHtml Yaml NonAsciiNoEscape AutoLinks Globalization } Fields Class Value 0 Indicates that the source file or folder is for a PowerShell classes.\nEnum Value 1 Indicates that the source file or folder is for a PowerShell enums.\nFunction Value 2 Indicates that the source file or folder is for a PowerShell functions.\n","categories":"","description":"The **MarkdownExtension** enum distinguishes the type of source file for processing.","excerpt":"The **MarkdownExtension** enum distinguishes the type of source file …","ref":"/Documentarian/modules/documentarian/reference/enums/markdownextension/","tags":"","title":"MarkdownExtension"},{"body":"New-AstPredicate Synopsis {{ Fill in the Synopsis }}\nSyntax New-AstPredicate [[-Type] \u003cType[]\u003e] [\u003cCommonParameters\u003e] Description {{ Fill in the Description }}\nExamples Example 1 PS C:\\\u003e {{ Add example code here }} {{ Add example description here }}\nParameters -Type {{ Fill Type Description }}\nType: Type[] Parameter Sets: (All) Aliases: Required: False Position: 0 Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.\nInputs None Outputs System.Management.Automation.ScriptBlock Notes Related Links ","categories":"","description":"","excerpt":"New-AstPredicate Synopsis {{ Fill in the Synopsis }}\nSyntax …","ref":"/Documentarian/modules/devx/reference/cmdlets/new-astpredicate/","tags":"","title":"New-AstPredicate"},{"body":"Definition Source Code # Copyright (c) Microsoft Corporation. # Licensed under the MIT License. class ParsedDocument { [System.IO.FileInfo]$FileInfo [string]$RawContent [Markdig.Syntax.MarkdownDocument]$ParsedMarkdown [System.Collections.Specialized.OrderedDictionary]$FrontMatter [string]$Body ParsedDocument() {} [string] ToDecoratedString() { return $this.Body | ConvertFrom-Markdown -AsVT100EncodedString | Select-Object -ExpandProperty VT100EncodedString } } The ParsedDocument class…\nExamples Example 1 Constructors ParsedDocument() The default constructor takes no input.\nMethods ToDecoratedString() Properties FileInfo Type System.IO.FileInfo RawContent Type System.String ParsedMarkdown Type Markdig.Syntax.MarkdownDocument FrontMatter Type System.Collections.Specialized.OrderedDictionary Body Type System.String ","categories":"","description":"Ensures that a value is a path pointing to a PowerShell file.","excerpt":"Ensures that a value is a path pointing to a PowerShell file.","ref":"/Documentarian/modules/documentarian/reference/classes/parseddocument/","tags":"","title":"ParsedDocument"},{"body":"Resolve-SourceDependency Synopsis {{ Fill in the Synopsis }}\nSyntax ByPath (Default) Resolve-SourceDependency -Path \u003cString[]\u003e [-SourceFile \u003cSourceFile[]\u003e] [\u003cCommonParameters\u003e] ByName Resolve-SourceDependency -Name \u003cString[]\u003e [-SourceFile \u003cSourceFile[]\u003e] [\u003cCommonParameters\u003e] Description {{ Fill in the Description }}\nExamples Example 1 PS C:\\\u003e {{ Add example code here }} {{ Add example description here }}\nParameters -Name {{ Fill Name Description }}\nType: String[] Parameter Sets: ByName Aliases: Required: True Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -Path {{ Fill Path Description }}\nType: String[] Parameter Sets: ByPath Aliases: Required: True Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -SourceFile {{ Fill SourceFile Description }}\nType: SourceFile[] Parameter Sets: (All) Aliases: Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.\nInputs None Outputs SourceReference Notes Related Links ","categories":"","description":"","excerpt":"Resolve-SourceDependency Synopsis {{ Fill in the Synopsis }}\nSyntax …","ref":"/Documentarian/modules/devx/reference/cmdlets/resolve-sourcedependency/","tags":"","title":"Resolve-SourceDependency"},{"body":"Resolve-SourceFolderPath Synopsis {{ Fill in the Synopsis }}\nSyntax Resolve-SourceFolderPath [[-SourceFile] \u003cSourceFile[]\u003e] [[-Path] \u003cString[]\u003e] [\u003cCommonParameters\u003e] Description {{ Fill in the Description }}\nExamples Example 1 PS C:\\\u003e {{ Add example code here }} {{ Add example description here }}\nPARAMETERS -Path {{ Fill Path Description }}\nType: String[] Parameter Sets: (All) Aliases: Required: False Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False -SourceFile {{ Fill SourceFile Description }}\nType: SourceFile[] Parameter Sets: (All) Aliases: Required: False Position: 0 Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.\nInputs None Outputs System.String Notes Related Links ","categories":"","description":"","excerpt":"Resolve-SourceFolderPath Synopsis {{ Fill in the Synopsis }}\nSyntax …","ref":"/Documentarian/modules/devx/reference/cmdlets/resolve-sourcefolderpath/","tags":"","title":"Resolve-SourceFolderPath"},{"body":"Definition The file /includes/source/devx/Public/Classes/SourceCategory.psm1 was not found.\nFields Class Value 0 Indicates that the source file or folder is for a PowerShell classes.\nEnum Value 1 Indicates that the source file or folder is for a PowerShell enums.\nFunction Value 2 Indicates that the source file or folder is for a PowerShell functions.\n","categories":"","description":"The **SourceCategory** enum distinguishes the type of source file for processing.","excerpt":"The **SourceCategory** enum distinguishes the type of source file for …","ref":"/Documentarian/modules/devx/reference/enums/sourcecategory/","tags":"","title":"SourceCategory"},{"body":"Definition The file /includes/source/devx/Public/Classes/SourceScope.psm1 was not found.\nFields Private Value 0 Indicates that the source file or folder is for private code, which is used only inside the module. Private code isn’t imported or visible when a user imports the module.\nPublic Value 1 Indicates that the source file or folder is for public code, which is automatically imported and visible when a user imports the module.\n","categories":"","description":"The **SourceScope** enum distinguishes the visibility and availability of a source file for processing.","excerpt":"The **SourceScope** enum distinguishes the visibility and availability …","ref":"/Documentarian/modules/devx/reference/enums/sourcescope/","tags":"","title":"SourceScope"},{"body":"","categories":"","description":"","excerpt":"","ref":"/Documentarian/tags/","tags":"","title":"Tags"},{"body":"Update-SourceDependency Synopsis {{ Fill in the Synopsis }}\nSyntax ByPath (Default) Update-SourceDependency -Path \u003cString[]\u003e [-SourceFile \u003cSourceFile[]\u003e] [\u003cCommonParameters\u003e] ByName Update-SourceDependency -Name \u003cString[]\u003e [-SourceFile \u003cSourceFile[]\u003e] [\u003cCommonParameters\u003e] Description {{ Fill in the Description }}\nExamples Example 1 PS C:\\\u003e {{ Add example code here }} {{ Add example description here }}\nParameters -Name {{ Fill Name Description }}\nType: String[] Parameter Sets: ByName Aliases: Required: True Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -Path {{ Fill Path Description }}\nType: String[] Parameter Sets: ByPath Aliases: Required: True Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False -SourceFile {{ Fill SourceFile Description }}\nType: SourceFile[] Parameter Sets: (All) Aliases: Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.\nInputs None Outputs SourceReference Notes Related Links ","categories":"","description":"","excerpt":"Update-SourceDependency Synopsis {{ Fill in the Synopsis }}\nSyntax …","ref":"/Documentarian/modules/devx/reference/cmdlets/update-sourcedependency/","tags":"","title":"Update-SourceDependency"},{"body":"Definition Inherits From System.Management.Automation.ValidateArgumentsAttribute Source Code # Copyright (c) Microsoft Corporation. # Licensed under the MIT License. using namespace System.Management.Automation class ValidatePowerShellScriptPath : ValidateArgumentsAttribute { [void] Validate([object]$arguments, [EngineIntrinsics]$engineIntrinsics) { $Path = $arguments if ([string]::IsNullOrWhiteSpace($path)) { throw [System.ArgumentNullException]::new() } try { $Item = Get-Item -Path $Path -ErrorAction Stop } catch [ItemNotFoundException] { throw [System.IO.FileNotFoundException]::new() } $MessagePrefix = 'Path must be the file path to a PowerShell file' $Provider = $Item.PSProvider.Name if ($Provider -ne 'FileSystem') { throw [System.ArgumentException]::new( \"$MessagePrefix; specified provider '$Provider' is invalid.\" ) } $Extension = $Item.Extension $ValidExtensions = @('.psd1', '.ps1', '.psm1') $isNotPowerShellFile = $Extension -notin $ValidExtensions if ($isNotPowerShellFile) { $Message = @( \"Specified file '$Path' has extension '$extension',\" 'but it must be one of the following:' ($ValidExtensions -join ', ') ) -join ' ' throw [System.ArgumentException]::new(\"$MessagePrefix; $Message\") } } } The ValidatePowerShellScriptPath attribute ensures that a specified argument points to a PowerShell file that exists. It’s used for commands and scripts that need to act on a PowerShell code file.\nThis attribute rejects values when:\nThe value is $null. The value is for a path to a file that doesn’t exist. The value is for a path to a file that isn’t recognized as a PowerShell code file. The attribute only recognizes files with the ps1, psd1, and psm1 extensions as PowerShell code files. Examples Example 1: Validating a variable [ValidatePowerShellScriptPath()]$Test = 'not-a-pwsh-file.txt' Example 2: Validating a parameter function Get-PwshContent { [cmdletbinding()] param ( [ValidatePowerShellScriptPath()]$Path ) process { Get-Content -Path $Path } } Constructors ValidatePowerShellScriptPath() The default constructor takes no input.\nMethods Validate(Object, EngineIntrinsics) Parameters Arguments Type System.Object The value of the argument to validate as a PowerShell script file path.\nEngineIntrinsics Type System.Management.Automation.EngineIntrinsics The PowerShell engine APIs for the context under which the prerequisite is being evaluated.\nExceptions System.ArgumentNullException\nValidate raises this exception when the argument is null.\nSystem.ArgumentNullException\nValidate raises this exception when the argument is null.\nSystem.IO.FileNotFoundException\nValidate raises this exception when the argument points to a file that doesn’t exist.\nSystem.ArgumentException\nValidate raises this exception when the argument points to a file that doesn’t have a valid extension for a PowerShell code file.\nProperties None.\n","categories":"","description":"Ensures that a value is a path pointing to a PowerShell file.","excerpt":"Ensures that a value is a path pointing to a PowerShell file.","ref":"/Documentarian/modules/devx/reference/attributes/validatepowershellscriptpath/","tags":"","title":"ValidatePowerShellScriptPath"}]